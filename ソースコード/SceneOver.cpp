#include "SceneOver.h"
#include "DxLib.h"
#include "SceneTitle.h"
#include "Game.h"
#include "Pad.h"
#include "Player.h"

namespace
{
	//フォントのサイズ
	constexpr int kFontSize = 32;

	//文字の位置
	constexpr int kFontPosX = 500;
	constexpr int kFontPosY = 500;


	//モデルの初期位置
	constexpr float kPosX = 300.0f;

	constexpr float kPosY = 100.0f;

	constexpr float kPosZ = 0.0f;

	//モデルのサイズ変更
	constexpr float kExpansion = 100.0f;

	//アニメモーションの番号
	//待機モーション
	constexpr int kStandByAnimIndex = 29;

	//アニメーションの切り替えにかかるフレーム数
	constexpr float kAnimChangeFrame = 4.0f;
	constexpr float kAnimChangeRateSpeed = 1.0f / kAnimChangeFrame;

	//フェードイン、フェードアウトの数値
	constexpr int kFadeValue = 255;

	//フェード値の増減
	constexpr int kFadeUpDown = 8;

	//カメラ情報
	constexpr float kCameraX = 0.0f;
	constexpr float kCameraY = 150.0f;
	constexpr float kCameraZ = -600.0f;

	//BGMのファイル名
	const char* const kBgmButton = "data/sound/Titledecide.mp3";

}


SceneOver::SceneOver():
	m_handle(false),
	modelHandle(false),
	m_pos(VGet(0.0f,0.0f,0.0f)),
	m_cameraPos(VGet(0.0f, 0.0f, 0.0f))

{
}

SceneOver::~SceneOver()
{
	DeleteGraph(m_handle);


	MV1DeleteModel(modelHandle);
	MV1DeleteModel(modelHandle2);

}

void SceneOver::Init()
{
	isSceneEnd = false;

	fadeAlpha = kFadeValue;

	m_handle = LoadGraph("data/data/GameOver.png");

	modelHandle = MV1LoadModel("data/model/knight.mv1");

	modelHandle2 = MV1LoadModel("data/model/tileHigh_forest.mv1");

	//モデルのサイズ調整
	MV1SetScale(modelHandle, VGet(kExpansion, kExpansion, kExpansion));
	MV1SetScale(modelHandle2, VGet(2000, 50, 400));

	//アニメーションの初期設定
	m_currentAnimNo = MV1AttachAnim(modelHandle, kStandByAnimIndex, -1, true);

	SetFontSize(kFontSize);

	m_pos = VGet(kPosX, kPosY, kPosZ);

	m_cameraPos.z = kCameraZ;
	m_cameraPos.y = kCameraY;
	m_cameraPos.x = kCameraX;;
	SetCameraPositionAndTarget_UpVecY(m_cameraPos, VGet(100, 200, 10));

}

std::shared_ptr<SceneBase> SceneOver::Update()
{

	if (Pad::IsTrigger(PAD_INPUT_1))	// パッドの1ボタンorキーボードのZキー
	{

		isSceneEnd = true;
		PlaySoundFile(kBgmButton, DX_PLAYTYPE_BACK);

	}

	if (isSceneEnd && fadeAlpha >= kFadeValue)
	{
		return std::make_shared<SceneTitle>();

	}

	//モデルの位置更新
	MV1SetPosition(modelHandle, m_pos);
	MV1SetPosition(modelHandle2, VGet(kPosX - 100, kPosY - 100, kPosZ));


	//フレームイン、アウト
	if (isSceneEnd)
	{
		fadeAlpha += kFadeUpDown;
		if (fadeAlpha > kFadeValue)
		{
			fadeAlpha = kFadeValue;
		}
	}
	else
	{
		fadeAlpha -= kFadeUpDown;
		if (fadeAlpha < 0)
		{
			fadeAlpha = 0;
		}
	}



	return shared_from_this();
}

void SceneOver::Draw()
{
	DrawGraph(0, 0, m_handle, true);

	MV1DrawModel(modelHandle);
	MV1DrawModel(modelHandle2);

#ifdef _DEBUG

	DrawString(8, 8, "SceneOver", GetColor(255, 255, 255));

#endif

	//フェードの描画
	SetDrawBlendMode(DX_BLENDMODE_ALPHA, fadeAlpha); //半透明で表示
	DrawBox(0, 0, Game::kScreenWidth, Game::kScreenHeight, GetColor(0, 0, 0), true);
	SetDrawBlendMode(DX_BLENDMODE_NOBLEND, 0); //不透明に戻しておく


}

void SceneOver::End()
{
}

void SceneOver::Animation()
{
	if (m_prevAnimNo != -1)
	{
		//test 8フレームで切り替え
		m_animBlendRate += kAnimChangeRateSpeed;
		if (m_animBlendRate >= 1.0f) m_animBlendRate = 1.0f;
		//変更後のアニメーション割合を設定する
		MV1SetAttachAnimBlendRate(modelHandle, m_prevAnimNo, 1.0f - m_animBlendRate);
		MV1SetAttachAnimBlendRate(modelHandle, m_currentAnimNo, m_animBlendRate);
	}
	bool isLoop = UpdateAnim(m_currentAnimNo);
	if (isLoop)
	{
		UpdateAnim(m_prevAnimNo);
	}
	ChangeAnim(kStandByAnimIndex);
}

bool SceneOver::UpdateAnim(int attachNo)
{
	//アニメーションが設定されていないので終了
	if (attachNo == -1) return false;

	//アニメーションを進行させる
	float now = MV1GetAttachAnimTime(modelHandle, attachNo);

	//アニメーション進める
	now += 0.5f;

	//現在再生中のアニメーションの総カウントを取得する
	float total = MV1GetAttachAnimTotalTime(modelHandle, attachNo);
	bool isLoop = false;

	while (now >= total)
	{
		now -= total;
		isLoop = true;
	}

	//進めた時間に設定
	MV1SetAttachAnimTime(modelHandle, attachNo, now);
	return isLoop;
}

void SceneOver::ChangeAnim(int animIndex)
{
	//さらに古いアニメーションがアタッチされている場合はこの時点で削除しておく
	if (m_prevAnimNo != -1)
	{
		MV1DetachAnim(modelHandle, m_prevAnimNo);
	}

	//現在再生中の待機アニメーションは変更前のアニメーション扱いに
	m_prevAnimNo = m_currentAnimNo;

	//変更後のアニメーションとして攻撃アニメーションを改めて設定する
	m_currentAnimNo = MV1AttachAnim(modelHandle, animIndex, -1, false);

	//切り替えの瞬間は変更前のアニメーションが再生される状態にする
	m_animBlendRate = 0.0f;

	//変更前のアニメーション100%
	MV1SetAttachAnimBlendRate(modelHandle, m_prevAnimNo, 1.0f - m_animBlendRate);
	//変更後のアニメーション0%
	MV1SetAttachAnimBlendRate(modelHandle, m_currentAnimNo, m_animBlendRate);
}
